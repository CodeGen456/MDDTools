/* ptolemy.cg.kernel.generic.GenericCodeGenerator
Generated by Ptolemy II (http://ptolemy.eecs.berkeley.edu)
Copyright (c) 2005-2016 The Regents of the University of California.
All rights reserved.
Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the above
copyright notice and the following two paragraphs appear in all copies
of this software.
IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.
*/
#ifndef NO_DECGHELLOWORLD_TYPES_H
#define NO_DECGHELLOWORLD_TYPES_H
#include <stdio.h>
#include <stdlib.h>
/* Define _BSD_SOURCE so that string.h includes a declaration for strdup under RHEL. */
#define _BSD_SOURCE
#include <string.h>
#include <math.h>
#include <errno.h>
#include <float.h>
#include <limits.h>
#include <stdarg.h>
#include "pbl.h"
#define DEDIRECTOR 1
/* ptolemy.cg.kernel.generic.program.procedural.c.CCodeGenerator
Generate type resolution code for .DECGHelloWorld */
// Constants.
#define MISSING 0
// boolean for AVR.  A mess.  I'm sorry...
#ifndef __AVR__
typedef unsigned char boolean;
#else
#ifndef  __cplusplus
typedef unsigned char boolean;
#else
typedef uint8_t boolean;
#endif
#endif
#define DO_NOT_CALL_EXIT
#ifdef DO_NOT_CALL_EXIT
#ifdef PTJNI
extern void throwInternalErrorException();
#define ptExit(x) throwInternalErrorException()
#else /* PTJNI */
#define ptExit(x) {}
#endif /* PTJNI */
#else /* DO_NOT_CALL_EXIT */
#define ptExit(x) exit(x)
#endif /* DO_NOT_CALL_EXIT */
typedef char* string;
/* Infinity is a valid Ptolemy identifier. */
#ifdef __AVR__
#define Infinity INFINITY
#else
#define Infinity HUGE_VAL
#endif
#ifdef __linux__
/* Linux tends to have NAN. */
#define NaN (__builtin_nanf (""))
#else /*linux*/
#define NaN nanf(0)
#endif /*linux*/
#define false 0
#define true 1
typedef struct Actor Actor;
typedef struct CompositeActor CompositeActor;
typedef struct IOPort IOPort;
typedef struct Receiver Receiver;
typedef struct Director Director;
typedef double Time;
#define TYPE_Token -1
#define TYPE_Unknown -1
#define TYPE_Scalar -1
#define TYPE_String 0
#define TYPE_Boolean 1
#define TYPE_Double 2
#define FUNC_convert 0
#define FUNC_delete 1
#define FUNC_isCloseTo 2
typedef struct token Token;
typedef char* StringToken;
typedef boolean BooleanToken;
typedef double DoubleToken;
// Token structure containing the specified types.
struct token {         // Base type for tokens.
    char type;         // TYPE field has to be the first field.
    union typeMembers {
        // type member declarations [i.e. Type1Token Type1;]
        StringToken String;
        BooleanToken Boolean;
        DoubleToken Double;
    } payload;
};
extern Token emptyToken; /* ptolemy.cg.kernel.generic.program.procedural.c.CCodeGenerator
Used by *_delete() and others. */
Token* convert(Token* t, char type);
Token* String_new(char* s);
Token* Boolean_new(boolean b);
Token* Double_new(double d);
#define StringtoInt atoi
#define StringtoDouble atof
#define StringtoLong atol
#define DoubletoInt (int)
#define InttoDouble (double)
#define InttoLong (long)
char* InttoString (int i);
char* LongtoString (long long l);
char* DoubletoString (double d);
char* BooleantoString (boolean b);
char* UnsignedBytetoString (unsigned char b);
// functionHeader:
Token* String_convert (Token *thisToken, ...);
// functionHeader:
Token* String_delete (Token *thisToken, ...);
Token* String_equals (Token *thisToken, ...);
// functionHeader:
Token* String_equals (Token *thisToken, ...);
// functionHeader:
Token* Boolean_convert (Token *thisToken, ...);
Token* Boolean_equals (Token *thisToken, ...);
// functionHeader:
Token* Boolean_equals (Token *thisToken, ...);
// functionHeader:
Token* Double_convert (Token *thisToken, ...);
// functionHeader:
Token* Double_isCloseTo (Token *thisToken, ...);
Token* scalarDelete(Token *token, ...);
#define NUM_TYPE 3
#define NUM_FUNC 3
extern Token* (*functionTable[NUM_TYPE][NUM_FUNC])(Token*, ...);
/* ptolemy.cg.kernel.generic.program.procedural.c.CCodeGenerator
end typeResolution code */
/* ptolemy.cg.kernel.generic.program.procedural.c.CCodeGenerator
end shared code */
#endif
